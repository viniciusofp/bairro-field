{"version":3,"sources":["data/bairros.js","components/selectWithTextInput.jsx","App.js","serviceWorker.js","index.js"],"names":["bairrosArray","name","count","minMaxArea","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","callForAreas","response","wrap","_context","prev","next","axios","get","concat","sent","data","AreaTotal","abrupt","stop","this","apply","arguments","SelectWithTextInput","state","selected","bairros","textInput","cursor","handleChange","event","filter","bairro","toLowerCase","includes","target","value","_","orderBy","_this","setState","_onFocus","_onBlur","setTimeout","_pressEnter","e","key","toConsumableArray","preventDefault","_keyPress","_this$state","keyCode","prevState","document","getElementById","scrollBy","top","behavior","length","console","log","handleSelect","render","react_default","createElement","className","type","autoComplete","placeholder","onChange","onBlur","onFocus","onKeyDown","onKeyPress","id","map","i","onClick","Component","App","min","max","areas","parseInt","selectWithTextInput","Boolean","window","location","hostname","match","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7600298.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const bairrosArray = [\n  { name: \"Brooklin Novo\", count: 2 },\n  { name: \"Brooklin\", count: 98 },\n  { name: \"Aclimação\", count: 2 },\n  { name: \"Alto De Pinheiros\", count: 13 },\n  { name: \"Campo Belo\", count: 62 },\n  { name: \"Bela Vista\", count: 2 },\n  { name: \"Alto Da Boa Vista\", count: 39 },\n  { name: \"Alto Boa Vista\", count: 2 },\n  { name: \"Brooklin Paulista\", count: 2 },\n  { name: \"Chácara Flora\", count: 3 },\n  { name: \"Chácara Santo Antônio\", count: 5 },\n  { name: \"Cerqueira César\", count: 1 },\n  { name: \"Cidade Jardim\", count: 12 },\n  { name: \"Chácara Monte Alegre\", count: 1 },\n  { name: \"Chac Monte Alegre\", count: 1 },\n  { name: \"Consolação\", count: 1 },\n  { name: \"Ipiranga\", count: 1 },\n  { name: \"Jardim América\", count: 59 },\n  { name: \"Indianópolis\", count: 3 },\n  { name: \"Jardim Guedala\", count: 5 },\n  { name: \"Jardim Luzitânia\", count: 19 },\n  { name: \"Higienópolis\", count: 4 },\n  { name: \"Itaim Bibi\", count: 79 },\n  { name: \"Granja Julieta\", count: 5 },\n  { name: \"Itaim\", count: 2 },\n  { name: \"Ibirapuera\", count: 7 },\n  { name: \"Morumbi\", count: 5 },\n  { name: \"Jardim Novo Mundo\", count: 1 },\n  { name: \"Jardim Paulista\", count: 194 },\n  { name: \"Vila Mascote\", count: 1 },\n  { name: \"Jardim Europa\", count: 17 },\n  { name: \"Paraíso\", count: 50 },\n  { name: \"Planalto Paulista\", count: 4 },\n  { name: \"Pinheiros\", count: 34 },\n  { name: \"Vila Mariana\", count: 29 },\n  { name: \"Jardins\", count: 72 },\n  { name: \"Pacaembu\", count: 1 },\n  { name: \"Perdizes\", count: 1 },\n  { name: \"Vila Madalena\", count: 7 },\n  { name: \"Vila Clementino\", count: 1 },\n  { name: \"Vila Olímpia\", count: 50 },\n  { name: \"Moema\", count: 201 },\n  { name: \"Morro dos Ingleses\", count: 1 },\n  { name: \"Jardim Paulistano\", count: 13 },\n  { name: \"Vila Nova Conceição\", count: 220 },\n  { name: \"Vila Uberabinha\", count: 1 }\n];\n\nexport const baseUrl = \"http://angloame16738-rest.vistahost.com.br\";\nexport const key = \"7bd1ce1edbf6054a8ef2202eb9f943c7\";\n\nexport const minMaxArea = async () => {\n  const callForAreas = await axios.get(\n    `${baseUrl}/imoveis/listarConteudo?key=${key}&pesquisa={\"fields\":[\"AreaTotal\"]}`\n  );\n  const response = await callForAreas.data.AreaTotal;\n\n  return response;\n};\n","import React, { Component } from \"react\";\nimport { bairrosArray } from \"../data/bairros\";\nimport _ from \"lodash\";\n\nclass SelectWithTextInput extends Component {\n  state = {\n    selected: false,\n    bairros: [],\n    textInput: \"\",\n    cursor: 0\n  };\n  componentDidMount() {\n    const bairros = _.orderBy(bairrosArray, [\"count\"], [\"desc\"]);\n    this.setState({ bairros });\n  }\n  handleChange = event => {\n    let bairros = bairrosArray.filter(bairro => {\n      return bairro.name\n        .toLowerCase()\n        .includes(event.target.value.toLowerCase());\n    });\n    bairros = _.orderBy(bairros, [\"count\"], [\"desc\"]);\n\n    this.setState({ textInput: event.target.value, bairros, cursor: 0 });\n  };\n  _onFocus = () => {\n    this.setState({ selected: true });\n  };\n  _onBlur = () => {\n    const setToFalse = () => {\n      this.setState({ selected: false });\n    };\n    setTimeout(function() {\n      setToFalse();\n    }, 200);\n  };\n  _pressEnter = e => {\n    if (e.key === \"Enter\") {\n      const bairros = [...this.state.bairros];\n      const bairro = bairros[this.state.cursor].name;\n      this.setState({ textInput: bairro, selected: false });\n      e.preventDefault();\n    }\n  };\n  _keyPress = e => {\n    const { cursor, bairros } = this.state;\n    // arrow up/down button should select next/previous list element\n    if (e.keyCode === 38 && cursor > 0) {\n      this.setState(prevState => ({\n        cursor: prevState.cursor - 1\n      }));\n      document\n        .getElementById(\"sugestionsBox\")\n        .scrollBy({ top: -36, behavior: \"smooth\" });\n    } else if (e.keyCode === 40 && cursor < bairros.length - 1) {\n      this.setState(prevState => ({\n        cursor: prevState.cursor + 1\n      }));\n      if (cursor > 2) {\n        document\n          .getElementById(\"sugestionsBox\")\n          .scrollBy({ top: 36, behavior: \"smooth\" });\n      }\n    }\n    console.log(this.state);\n  };\n  handleSelect = bairro => {\n    console.log(bairro);\n    this.setState({ textInput: bairro });\n  };\n  render = () => {\n    const bairros = _.orderBy(bairrosArray, [\"count\"], [\"desc\"]);\n\n    return (\n      <div className=\"selectWithTextInput\">\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          value={this.state.textInput}\n          placeholder=\"Digite o bairro\"\n          onChange={this.handleChange}\n          onBlur={this._onBlur}\n          onFocus={this._onFocus}\n          onKeyDown={this._keyPress}\n          onKeyPress={this._pressEnter}\n        />\n        <div\n          id=\"sugestionsBox\"\n          className={\n            this.state.selected\n              ? \"selectWithTextInput__sugestions active\"\n              : \"selectWithTextInput__sugestions\"\n          }\n        >\n          <h6>BAIRROS</h6>\n          {this.state.bairros.map((bairro, i) => {\n            return (\n              <div\n                className={\n                  this.state.cursor === i\n                    ? \"selectWithTextInput__sugestions__option active\"\n                    : \"selectWithTextInput__sugestions__option\"\n                }\n                onClick={() => this.handleSelect(bairro.name)}\n              >\n                {bairro.name}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default SelectWithTextInput;\n","import React, { Component } from \"react\";\nimport SelectWithTextInput from \"./components/selectWithTextInput\";\nimport InputRange from \"react-input-range\";\nimport \"react-input-range/lib/css/index.css\";\nimport { minMaxArea } from \"./data/bairros\";\n\nclass App extends Component {\n  state = {\n    value: { min: 0, max: 1 },\n    areas: { min: 0, max: 1 }\n  };\n  areas = async () => {\n    let areas = await minMaxArea();\n    areas = { min: parseInt(areas[0]), max: parseInt(areas[1]) };\n    this.setState({ areas, value: areas });\n  };\n  componentWillMount() {\n    this.areas();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-4\">\n              <div className=\"my-5\">\n                <h6>Bairros</h6>\n                <SelectWithTextInput />\n              </div>\n            </div>\n            {/* <div className=\"col-4\">\n              <div className=\"my-5\">\n                <h6 className=\"\">Area</h6>\n                <InputRange\n                  maxValue={this.state.areas.max}\n                  minValue={this.state.areas.min}\n                  formatLabel={value => `${value}m2`}\n                  value={this.state.value}\n                  onChange={value => this.setState({ value })}\n                />\n              </div>\n            </div> */}\n          </div>\n          {/* <div className=\"row\">\n            <div className=\"col-12\">\n              <h6>Tipo do Imóvel</h6>\n            </div>\n          </div> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}